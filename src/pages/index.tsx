import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { useState } from "react";
import { signIn, signOut, useSession } from "next-auth/react";
import { useRouter } from "next/router";

import { trpc } from "../utils/trpc";
import { useMutation, useQueryClient } from "@tanstack/react-query";

// Component Imports
import MatchCard from "../components/MatchComponents/MatchCard";
import CreateMatch from "../components/MatchComponents/CreateMatch";

// Hooks
import useUiStore from "../utils/hooks/uiStore";

const Home: NextPage = () => {
  const { data: session } = useSession();
  const router = useRouter();
  const toggleModal = useUiStore((state) => state?.toggleCreateMatchModal);

  const showCreateMatchModal = useUiStore((state) => state?.createMatchModal)

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Ultimate <span className="text-[hsl(280,100%,70%)]">Ladder</span>
          </h1>
          <div className="flex flex-col items-center gap-2">
            <AuthShowcase />
            <button className="btn" onClick={toggleModal}>
              create match
            </button>
              {session ? (
                <Matches />
              ) : null}
          </div>
        </div>
        {showCreateMatchModal ? (
          <CreateMatch/>
        ) : null}
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined },
  );
  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};

const Matches: React.FC = () => {
  const { data: sessionData } = useSession();
  const { data: matches  } = trpc.match.getAllMatches.useQuery(undefined, {refetchInterval: 10000})

  return (
    <div >
      {matches && matches.length > 0 ? (
        <div className='grid grid-cols-2 gap-4'>
          {matches.map((match) => {
            const checkCreator = () => {
              if (sessionData?.user && sessionData?.user.id === match.hostId) {
                return true
              } else {
                return false
              }
            }
            const isCreator = checkCreator()
            console.log(match)
            return (
              <MatchCard key={match.id} match={match} isCreator={isCreator}/>
            )
          })}
        </div>
      ) : (
        <div>
          No Matches Available
        </div>
      )}
    </div>
  )
}